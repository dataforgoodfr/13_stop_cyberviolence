---
title: "Chainlit data layer and LLM Observability"
---

# Chainlit data layer

see also [docs on CL data layer](https://docs.chainlit.io/data-layers/sqlalchemy)

The chainlit app data layer uses the `SQLAlchemyDataLayer` and the `GCSStorageClient` implemented in chainlit. This layer captures all user interactions, text is stored in a SQL database (see schema below), and artifacts (images, audio, etc.). The original schema presented at https://docs.chainlit.io/data-layers/sqlalchemy as has been extended by the `longfeedbacks` table to save input from the [custom feedback form](./custom_feedback.qmd).

The connection uri for the PostgreSQL is read from the environment variable `DL_CONNINFO` on runtime. (see also [Cloud Configuration](./cloud_configuration.qmd))

```sql
--: code-fold: true
CREATE TABLE users (
    "id" UUID PRIMARY KEY,
    "identifier" TEXT NOT NULL UNIQUE,
    "metadata" JSONB NOT NULL,
    "createdAt" TEXT
);

CREATE TABLE IF NOT EXISTS threads (
    "id" UUID PRIMARY KEY,
    "createdAt" TEXT,
    "name" TEXT,
    "userId" UUID,
    "userIdentifier" TEXT,
    "tags" TEXT[],
    "metadata" JSONB,
    FOREIGN KEY ("userId") REFERENCES users("id") ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS steps (
    "id" UUID PRIMARY KEY,
    "name" TEXT NOT NULL,
    "type" TEXT NOT NULL,
    "threadId" UUID NOT NULL,
    "parentId" UUID,
    "streaming" BOOLEAN NOT NULL,
    "waitForAnswer" BOOLEAN,
    "isError" BOOLEAN,
    "metadata" JSONB,
    "tags" TEXT[],
    "input" TEXT,
    "output" TEXT,
    "createdAt" TEXT,
    "command" TEXT,
    "start" TEXT,
    "end" TEXT,
    "generation" JSONB,
    "showInput" TEXT,
    "language" TEXT,
    "indent" INT,
    "defaultOpen" BOOLEAN,
    FOREIGN KEY ("threadId") REFERENCES threads("id") ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS elements (
    "id" UUID PRIMARY KEY,
    "threadId" UUID,
    "type" TEXT,
    "url" TEXT,
    "chainlitKey" TEXT,
    "name" TEXT NOT NULL,
    "display" TEXT,
    "objectKey" TEXT,
    "size" TEXT,
    "page" INT,
    "language" TEXT,
    "forId" UUID,
    "mime" TEXT,
    "props" JSONB,
    FOREIGN KEY ("threadId") REFERENCES threads("id") ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS feedbacks (
    "id" UUID PRIMARY KEY,
    "forId" UUID NOT NULL,
    "threadId" UUID NOT NULL,
    "value" INT NOT NULL,
    "comment" TEXT,
    FOREIGN KEY ("threadId") REFERENCES threads("id") ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS longfeedbacks (
    "id" UUID PRIMARY KEY,
    "threadId" UUID UNIQUE NOT NULL,
    "value" INT NOT NULL,
    "comment" TEXT,
    FOREIGN KEY ("threadId") REFERENCES threads("id") ON DELETE CASCADE
);
```

# LLM Observability

LLM debugging and observability is assured using [Langfuse](langfuse.com) which provides 
prebuilt callback object for `langgraph`. Datalayer and LLM traces are linked via the `langfuse_session` field of the `metadata` dictionary in the `steps` table of the PostgreSQL data layer.

