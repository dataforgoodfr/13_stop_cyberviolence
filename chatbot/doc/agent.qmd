---
modified: '2025-07-21'
title: Agentic framework and structure
---

_Last updated: {{< meta modified >}}_

# Agentic framework and structure

:::{#fig-agentlayout}
![The structure of the `service1` agent.](./img/graph.png)
:::

**Implementation details**

At the current state, the main agent logic is implemented as a monolith in the main .py file : `chatbot/agents/service1/service1.py`

The agent is implemented using `langgraph` and calls the `gemini` API (OpenAI syntax) using the convenience wrappers import from `langchain`.

All data models for :

- the current graph state
- schemas used for requesting structured output

are also defined in `service1.py` as `TypedDict`.

## Node descriptions

- `agent1`

    Router node that determines the next action based on the message history

- `collect_context`

    This node is only active in the beginning of the conversation and the graph flow is forced through this node until all required context questions have been asked.

- `ask_for_context`

    The conversation is routed through this node when `agent1` determines that the context of the situation still needs clarification.

- `give_advice`

    Node responsible for redacting an advice message, is encouraged to invoke `research_strategies` to enrich answers with ingested documents (see below)

- `research_strategies`

    Is invoked by `give_advice`, documents provided by the School of Social networks and StopCyberviolence are provided using prompt stuffing. Exchanges between `give_advice` and `research_strategies` are handled via the graph state but kept apart from the general message flow in order to save tokens and preserve context.

- `escalate`

    Invoked when `agent1` determines that the situation needs human intervention, logic not yet implemented

- `classify_message`

    This node is an artifact from early development. Its purpose was to provide a tool for the agent to classify the message of interest as cyberviolence using a classical NLP approach. 
    Not implemented (yet), might be removed in the future.

- `user_feedback`

    Also an artifact from early development for debugging purposes, to be removed in the future

## Routings

Routing are either deterministic or conditional on the `action` chosen by the agent. `action` is tracked in the current graph state.
Conditional routings are not mentioned by name in @fig-agentlayout but indicated by dashed lines between nodes.

- `router`

  Routing within the agent's actions as determined by `agent1`


- `give_advice_after_context_collection`

  Artifact from an attempt to short circuit to `give_advice` after the initial context collecition is complete, error prone for problematic messages, routes to `agent1` in current state

- `should_collect_context`

  Checks whether the initial context collection phase has been completed, if not loops to `collect_context` until done

- `advice_router`

  Routing after `give_advice`, can invoke `research_strategies`

